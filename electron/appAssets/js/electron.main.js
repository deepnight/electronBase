// Generated by Haxe 4.1.5
(function ($global) { "use strict";
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = "EReg";
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,__class__: EReg
};
var ElectronMain = function() { };
ElectronMain.__name__ = "ElectronMain";
ElectronMain.main = function() {
	electron_main_App.whenReady().then(function(_) {
		ElectronMain.createAppWindow();
	});
	electron_main_App.on("window-all-closed",function() {
		ElectronMain.mainWindow = null;
		electron_main_App.quit();
	});
	electron_main_App.on("activate",function() {
		if(electron_main_BrowserWindow.getAllWindows().length == 0) {
			ElectronMain.createAppWindow();
		}
	});
};
ElectronMain.createAppWindow = function() {
	ElectronMain.mainWindow = new electron_main_BrowserWindow({ webPreferences : { nodeIntegration : true}, fullscreenable : true, show : false, title : "LDtk", icon : __dirname + "/appIcon.png", backgroundColor : "#1e2229"});
	ElectronMain.mainWindow.once("ready-to-show",function(ev) {
		var disp = require("electron").screen.getPrimaryDisplay();
		ElectronMain.mainWindow.webContents.setZoomFactor(dn_electron_Tools.getZoomToFit(800,600));
		console.log("src/electron.main/ElectronMain.hx:38:",ElectronMain.mainWindow.webContents.getZoomFactor());
	});
	dn_electron_Tools.initMain(ElectronMain.mainWindow);
	dn_electron_Dialogs.initMain(ElectronMain.mainWindow);
	dn_electron_ElectronUpdater.initMain(ElectronMain.mainWindow);
	dn_electron_Tools.m_createDebugMenu();
	var path = "electron/appAssets/app.html";
	var p = ElectronMain.mainWindow.loadFile(path);
	ElectronMain.mainWindow.maximize();
	p.then(function(_) {
		return;
	},function(_) {
		dn_electron_Tools.fatalError("File not found: (" + dn_electron_Tools.getAppResourceDir() + "/" + path + ")!");
	});
	ElectronMain.mainWindow.on("closed",function() {
		ElectronMain.mainWindow = null;
	});
};
var HxOverrides = function() { };
HxOverrides.__name__ = "HxOverrides";
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
Math.__name__ = "Math";
var Std = function() { };
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var StringTools = function() { };
StringTools.__name__ = "StringTools";
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var dn_Args = function(rawArgs,knownArgs,debug) {
	if(debug == null) {
		debug = false;
	}
	this.soloValues = [];
	this.args = new haxe_ds_StringMap();
	var valueReg = new EReg("^\\s*(?:\"([^-].*?)\"|'([^-].*?)'|([^-\\s].*?)(?:\\s|$))","gi");
	var argNameReg = new EReg("^(-{0,2}.*?)(?:[=:\\s]|$)","gi");
	this.raw = rawArgs;
	if(knownArgs == null) {
		knownArgs = new haxe_ds_StringMap();
	}
	var a = haxe_ds_StringMap.kvIterator(knownArgs.h);
	while(a.hasNext()) {
		var a1 = a.next();
		if(!argNameReg.match(a1.key)) {
			throw haxe_Exception.thrown("Malformed known arg: " + a1.key);
		}
	}
	if(debug) {
		console.log("dn/Args.hx:32:","KnownArgs: " + (knownArgs == null ? "null" : haxe_ds_StringMap.stringify(knownArgs.h)));
	}
	var str = rawArgs;
	while(true) if(dn_Args.ARG_REG.match(str)) {
		if(debug) {
			console.log("dn/Args.hx:40:","Found arg: " + dn_Args.ARG_REG.matched(1));
		}
		argNameReg.match(dn_Args.ARG_REG.matched(1));
		var argName = argNameReg.matched(1);
		this.args.h[argName] = [];
		if(debug) {
			console.log("dn/Args.hx:46:","  (argName=\"" + argName + "\")");
		}
		var valueCount = Object.prototype.hasOwnProperty.call(knownArgs.h,argName) ? knownArgs.h[argName] : dn_Args.ARG_REG.matched(1).indexOf("=") >= 0 ? 1 : 0;
		str = dn_Args.ARG_REG.matchedRight();
		if(valueCount > 0) {
			if(debug) {
				console.log("dn/Args.hx:58:","  Expecting " + valueCount + " following parameter(s)");
			}
			var idx = 0;
			while(valueCount > 0) if(valueReg.match(str)) {
				var v = valueReg.matched(valueReg.matched(1) == null ? valueReg.matched(2) == null ? 3 : 2 : 1);
				if(debug) {
					console.log("dn/Args.hx:65:","   -> Parameter#" + idx + "=" + v);
				}
				this.args.h[argName].push(v);
				str = valueReg.matchedRight();
				--valueCount;
				++idx;
			} else {
				break;
			}
		}
	} else if(valueReg.match(str)) {
		var v1 = valueReg.matched(valueReg.matched(1) == null ? valueReg.matched(2) == null ? 3 : 2 : 1);
		if(debug) {
			console.log("dn/Args.hx:80:","Found solo value: " + v1);
		}
		this.soloValues.push(v1);
		str = valueReg.matchedRight();
	} else {
		break;
	}
};
dn_Args.__name__ = "dn.Args";
dn_Args.prototype = {
	toString: function() {
		var argsOut = [];
		var a = haxe_ds_StringMap.kvIterator(this.args.h);
		while(a.hasNext()) {
			var a1 = a.next();
			argsOut.push(a1.key + (a1.value.length > 0 ? "(+" + a1.value.length + ")" : ""));
		}
		return "Args: soloValues=[" + this.soloValues.join(", ") + "], args=[" + argsOut.join(", ") + "]";
	}
	,__class__: dn_Args
};
var dn__$Cooldown_CdInst = function() { };
dn__$Cooldown_CdInst.__name__ = "dn._Cooldown.CdInst";
var dn_Cooldown = function(fps) {
	if(dn_Cooldown.INDEXES == null) {
		if(haxe_rtti_Meta.getType(dn_Cooldown).indexes != null) {
			var _g = [];
			var _g1 = 0;
			var _g2 = haxe_rtti_Meta.getType(dn_Cooldown).indexes;
			while(_g1 < _g2.length) {
				var str = _g2[_g1];
				++_g1;
				_g.push(Std.string(str));
			}
			dn_Cooldown.INDEXES = _g;
		}
	}
	this.cdList = [];
	this.fastCheck = new haxe_ds_IntMap();
	this.baseFps = fps;
};
dn_Cooldown.__name__ = "dn.Cooldown";
dn_Cooldown.prototype = {
	__class__: dn_Cooldown
};
var dn__$Delayer_Task = function() { };
dn__$Delayer_Task.__name__ = "dn._Delayer.Task";
var dn_Delayer = function(fps) {
	this.fps = fps;
	this.delays = [];
};
dn_Delayer.__name__ = "dn.Delayer";
dn_Delayer.prototype = {
	__class__: dn_Delayer
};
var dn_FilePath = function() {
	this.init();
};
dn_FilePath.__name__ = "dn.FilePath";
dn_FilePath.prototype = {
	init: function() {
		this.backslashes = false;
		this.directory = null;
		this.set_fileName(null);
		this.set_extension(null);
	}
	,sanitize: function(v,ignoreDoubleDots) {
		if(ignoreDoubleDots == null) {
			ignoreDoubleDots = false;
		}
		if(ignoreDoubleDots) {
			var _this_r = new RegExp("[*{}/\\\\<>?|]","g".split("u").join(""));
			return v.replace(_this_r,"_");
		} else {
			var _this_r = new RegExp("[*{}/\\\\<>?|:]","g".split("u").join(""));
			return v.replace(_this_r,"_");
		}
	}
	,set_extension: function(v) {
		if(v == null) {
			return this.extension = null;
		} else {
			while(v.charAt(0) == ".") v = HxOverrides.substr(v,1,null);
			v = StringTools.replace(v," ","_");
			if(v.length == 0) {
				return this.extension = null;
			}
			return this.extension = this.sanitize(v);
		}
	}
	,set_fileName: function(v) {
		if(v == null) {
			return this.fileName = null;
		}
		v = this.sanitize(v);
		return this.fileName = v;
	}
	,toString: function() {
		return (this.uriScheme != null ? this.uriAuthority == null ? "" + this.uriScheme + ":/" : "" + this.uriScheme + "://" + this.uriAuthority + "/" : "") + (this.directory == null ? "" : this.fileName == null && this.extension == null || this.directory == (this.backslashes ? "\\" : "/") ? this.directory : this.directory == null ? null : this.directory == (this.backslashes ? "\\" : "/") ? this.directory : this.directory + (this.backslashes ? "\\" : "/")) + ((this.fileName == null && this.extension == null ? null : (this.fileName == null ? "" : this.fileName) + (this.extension == null ? "" : "." + this.extension)) == null ? "" : this.fileName == null && this.extension == null ? null : (this.fileName == null ? "" : this.fileName) + (this.extension == null ? "" : "." + this.extension));
	}
	,__class__: dn_FilePath
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.kvIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		var k = keys[idx - 1];
		return { key : k, value : h[k]};
	}};
};
haxe_ds_StringMap.stringify = function(h) {
	var s = "{";
	var first = true;
	for (var key in h) {
		if (first) first = false; else s += ',';
		s += key + ' => ' + Std.string(h[key]);
	}
	return s + "}";
};
haxe_ds_StringMap.prototype = {
	__class__: haxe_ds_StringMap
};
var dn_Process = function(parent) {
	this.baseTimeMul = 1.0;
	this.init();
	if(parent == null) {
		dn_Process.ROOTS.push(this);
	} else {
		parent.addChild(this);
	}
};
dn_Process.__name__ = "dn.Process";
dn_Process.prototype = {
	init: function() {
		this.uniqId = dn_Process.UNIQ_ID++;
		this.children = [];
		this._manuallyPaused = false;
		this.destroyed = false;
		this.ftime = 0;
		this.uftime = 0;
		this.utmod = 1;
		this.baseTimeMul = 1;
		this.cd = new dn_Cooldown(this.getDefaultFrameRate());
		this.delayer = new dn_Delayer(this.getDefaultFrameRate());
		this.tw = new dn_Tweenie(this.getDefaultFrameRate());
		this.ucd = new dn_Cooldown(this.getDefaultFrameRate());
		this.udelayer = new dn_Delayer(this.getDefaultFrameRate());
	}
	,toString: function() {
		var tmp = "#" + this.uniqId + " ";
		var tmp1;
		if(this.name != null) {
			tmp1 = this.name;
		} else {
			var c = js_Boot.getClass(this);
			tmp1 = c.__name__;
		}
		var tmp2;
		if(this._manuallyPaused) {
			tmp2 = true;
		} else if(this.parent != null) {
			var _this = this.parent;
			tmp2 = _this._manuallyPaused ? true : _this.parent != null && _this.parent.isPaused();
		} else {
			tmp2 = false;
		}
		return tmp + tmp1 + (tmp2 ? " [PAUSED]" : "");
	}
	,getDefaultFrameRate: function() {
		return 30;
	}
	,isPaused: function() {
		if(this._manuallyPaused) {
			return true;
		} else if(this.parent != null) {
			return this.parent.isPaused();
		} else {
			return false;
		}
	}
	,addChild: function(p) {
		if(p.parent == null) {
			HxOverrides.remove(dn_Process.ROOTS,p);
		} else {
			HxOverrides.remove(p.parent.children,p);
		}
		p.parent = this;
		this.children.push(p);
	}
	,__class__: dn_Process
};
var dn_Tween = function() { };
dn_Tween.__name__ = "dn.Tween";
var dn_Tweenie = function(fps) {
	this.baseFps = fps;
	this.tlist = [];
};
dn_Tweenie.__name__ = "dn.Tweenie";
dn_Tweenie.prototype = {
	__class__: dn_Tweenie
};
var dn_Version = function(v) {
	this.patch = 0;
	this.minor = 0;
	this.major = 0;
	if(v != null) {
		this.set(v);
	}
};
dn_Version.__name__ = "dn.Version";
dn_Version.prototype = {
	set: function(v) {
		if(v != null && dn_Version.VERSION_REG.match(v)) {
			this.major = Std.parseInt(dn_Version.VERSION_REG.matched(1));
			this.minor = dn_Version.VERSION_REG.matched(2) == "" ? 0 : Std.parseInt(dn_Version.VERSION_REG.matched(2));
			this.patch = dn_Version.VERSION_REG.matched(3) == "" ? 0 : Std.parseInt(dn_Version.VERSION_REG.matched(3));
			this.label = dn_Version.VERSION_REG.matched(4) == "" ? null : dn_Version.VERSION_REG.matched(4);
		}
	}
	,toString: function() {
		return "" + ("" + this.major + "." + this.minor + "." + this.patch) + (this.label != null ? "-" + this.label : "");
	}
	,__class__: dn_Version
};
var dn_electron_Dialogs = function() { };
dn_electron_Dialogs.__name__ = "dn.electron.Dialogs";
dn_electron_Dialogs.initMain = function(browserWindow) {
	if(electron_main_IpcMain == null) {
		throw haxe_Exception.thrown("Should only be called in Electron Main");
	}
	electron_main_IpcMain.handle("openDialog",function(event,options) {
		var filePaths = electron_main_Dialog.showOpenDialogSync(browserWindow,options);
		if(filePaths == null) {
			return null;
		} else {
			return filePaths[0];
		}
	});
	electron_main_IpcMain.handle("saveAsDialog",function(event,options) {
		var filePaths = electron_main_Dialog.showSaveDialogSync(browserWindow,options);
		if(filePaths == null) {
			return null;
		} else {
			return filePaths;
		}
	});
};
var dn_electron_ElectronUpdater = function() { };
dn_electron_ElectronUpdater.__name__ = "dn.electron.ElectronUpdater";
dn_electron_ElectronUpdater.initMain = function(win) {
	if(electron_main_IpcMain == null) {
		throw haxe_Exception.thrown("Should only be called in electorn Main!");
	}
	var autoUpdater = require("electron-updater").autoUpdater;
	dn_electron_ElectronUpdater.isIntalling = false;
	var isChecking = false;
	var hasDownloadedUpdate = false;
	autoUpdater.on("checking-for-update",function(info) {
		isChecking = true;
		win.webContents.send("updateCheckStart",info);
	});
	autoUpdater.on("update-available",function(info) {
		isChecking = false;
		win.webContents.send("updateFound",info);
	});
	autoUpdater.on("update-not-available",function(info) {
		isChecking = false;
		win.webContents.send("updateNotFound");
	});
	autoUpdater.on("update-downloaded",function(info) {
		console.log("Update ready!");
		win.webContents.send("updateDownloaded");
		hasDownloadedUpdate = true;
	});
	autoUpdater.on("error",function(ev) {
		var ev1 = ev;
		if(isChecking) {
			win.webContents.send("updateError",ev1.message);
		}
		isChecking = false;
	});
	electron_main_IpcMain.handle("checkUpdate",function(event,args) {
		var prom = autoUpdater.checkForUpdates();
		prom.then(function() {
			return;
		},function(err) {
			return;
		});
	});
	electron_main_IpcMain.handle("installUpdate",function(event) {
		if(!hasDownloadedUpdate) {
			console.log("Need to download update first!");
			return;
		}
		console.log("Installing update...");
		dn_electron_ElectronUpdater.isIntalling = true;
		autoUpdater.quitAndInstall();
	});
};
var dn_electron_Tools = function() { };
dn_electron_Tools.__name__ = "dn.electron.Tools";
dn_electron_Tools.initMain = function(win) {
	dn_electron_Tools.mainWindow = win;
	electron_main_IpcMain.handle("exitApp",dn_electron_Tools.exitApp);
	electron_main_IpcMain.handle("reloadWindow",dn_electron_Tools.reloadWindow);
	electron_main_IpcMain.handle("setFullScreen",function(ev,flag) {
		dn_electron_Tools.setFullScreen(flag);
	});
	electron_main_IpcMain.handle("setWindowTitle",function(ev,str) {
		dn_electron_Tools.setWindowTitle(str);
	});
	electron_main_IpcMain.handle("fatalError",function(ev,str) {
		dn_electron_Tools.fatalError(str);
	});
	electron_main_IpcMain.on("getScreenWidth",function(ev) {
		return ev.returnValue = dn_electron_Tools.getScreenWidth();
	});
	electron_main_IpcMain.on("getScreenHeight",function(ev) {
		return ev.returnValue = dn_electron_Tools.getScreenHeight();
	});
	electron_main_IpcMain.on("getRawArgs",function(ev) {
		return ev.returnValue = dn_electron_Tools.getRawArgs();
	});
	electron_main_IpcMain.on("getAppResourceDir",function(ev) {
		return ev.returnValue = dn_electron_Tools.getAppResourceDir();
	});
	electron_main_IpcMain.on("getExeDir",function(ev) {
		return ev.returnValue = dn_electron_Tools.getExeDir();
	});
	electron_main_IpcMain.on("getUserDataDir",function(ev) {
		return ev.returnValue = dn_electron_Tools.getUserDataDir();
	});
	electron_main_IpcMain.on("isFullScreen",function(ev) {
		return ev.returnValue = dn_electron_Tools.isFullScreen();
	});
};
dn_electron_Tools.exitApp = function() {
	if(electron_main_App == null) {
		electron_renderer_IpcRenderer.invoke("exitApp");
	} else {
		electron_main_App.exit();
	}
};
dn_electron_Tools.reloadWindow = function() {
	if(electron_main_App == null) {
		electron_renderer_IpcRenderer.invoke("reloadWindow");
	} else {
		dn_electron_Tools.mainWindow.reload();
	}
};
dn_electron_Tools.setFullScreen = function(full) {
	if(electron_main_App == null) {
		electron_renderer_IpcRenderer.invoke("setFullScreen",full);
	} else {
		dn_electron_Tools.mainWindow.setFullScreen(full);
	}
};
dn_electron_Tools.setWindowTitle = function(str) {
	if(electron_main_App == null) {
		electron_renderer_IpcRenderer.invoke("setWindowTitle",str);
	} else {
		dn_electron_Tools.mainWindow.setTitle(str);
	}
};
dn_electron_Tools.isFullScreen = function() {
	if(electron_main_App == null) {
		return electron_renderer_IpcRenderer.sendSync("isFullScreen");
	} else {
		return dn_electron_Tools.mainWindow.isFullScreen();
	}
};
dn_electron_Tools.getScreenWidth = function() {
	if(electron_main_App == null) {
		return electron_renderer_IpcRenderer.sendSync("getScreenWidth");
	} else {
		return require("electron").screen.getPrimaryDisplay().size.width;
	}
};
dn_electron_Tools.getScreenHeight = function() {
	if(electron_main_App == null) {
		return electron_renderer_IpcRenderer.sendSync("getScreenHeight");
	} else {
		return require("electron").screen.getPrimaryDisplay().size.height;
	}
};
dn_electron_Tools.getAppResourceDir = function() {
	if(electron_main_App == null) {
		return electron_renderer_IpcRenderer.sendSync("getAppResourceDir");
	} else {
		return electron_main_App.getAppPath();
	}
};
dn_electron_Tools.getExeDir = function() {
	if(electron_main_App == null) {
		return electron_renderer_IpcRenderer.sendSync("getExeDir");
	} else {
		return electron_main_App.getPath("exe");
	}
};
dn_electron_Tools.getUserDataDir = function() {
	if(electron_main_App == null) {
		return electron_renderer_IpcRenderer.sendSync("getUserDataDir");
	} else {
		return electron_main_App.getPath("userData");
	}
};
dn_electron_Tools.getRawArgs = function() {
	if(electron_main_App == null) {
		try {
			return electron_renderer_IpcRenderer.sendSync("getRawArgs");
		} catch( _g ) {
			return [];
		}
	} else {
		return process.argv;
	}
};
dn_electron_Tools.getZoomToFit = function(targetWid,targetHei) {
	var x = dn_electron_Tools.getScreenWidth() / targetWid;
	var y = dn_electron_Tools.getScreenHeight() / targetHei;
	var y1 = x < y ? x : y;
	if(0 > y1) {
		return 0;
	} else {
		return y1;
	}
};
dn_electron_Tools.fatalError = function(err) {
	if(electron_main_App == null) {
		electron_renderer_IpcRenderer.invoke("fatalError",err);
	} else {
		electron_main_Dialog.showErrorBox("Fatal error",err);
		electron_main_App.quit();
	}
};
dn_electron_Tools.m_createDebugMenu = function(items) {
	if(items == null) {
		items = [];
	}
	var menu = electron_main_Menu.buildFromTemplate([{ label : "Debug tools", submenu : [{ label : "Reload", click : dn_electron_Tools.reloadWindow, accelerator : "CmdOrCtrl+R"},{ label : "Dev tools", click : function() {
		dn_electron_Tools.mainWindow.webContents.toggleDevTools();
	}, accelerator : "CmdOrCtrl+Shift+I"},{ label : "Toggle full screen", click : function() {
		dn_electron_Tools.setFullScreen(!dn_electron_Tools.isFullScreen());
	}, accelerator : "Alt+Enter"},{ label : "Exit", click : dn_electron_Tools.exitApp, accelerator : "CmdOrCtrl+Q"}].concat(items)}]);
	dn_electron_Tools.mainWindow.setMenu(menu);
	console.log("dn/electron/Tools.hx:166:",electron_main_Menu.getApplicationMenu());
	return menu;
};
var electron_main_App = require("electron").app;
var electron_main_BrowserWindow = require("electron").BrowserWindow;
var electron_main_Dialog = require("electron").dialog;
var electron_main_IpcMain = require("electron").ipcMain;
var electron_main_Menu = require("electron").Menu;
var electron_renderer_IpcRenderer = require("electron").ipcRenderer;
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
});
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	__class__: haxe_ValueException
});
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.prototype = {
	__class__: haxe_ds_IntMap
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_rtti_Meta = function() { };
haxe_rtti_Meta.__name__ = "haxe.rtti.Meta";
haxe_rtti_Meta.getType = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.obj == null) {
		return { };
	} else {
		return meta.obj;
	}
};
haxe_rtti_Meta.getMeta = function(t) {
	return t.__meta__;
};
var js_Boot = function() { };
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
String.prototype.__class__ = String;
String.__name__ = "String";
Array.__name__ = "Array";
js_Boot.__toStr = ({ }).toString;
dn_Args.ARG_REG = new EReg("^\\s*(-{1,2}[a-z0-9-]+(?:$|[=:]|\\s+))","gi");
dn_Cooldown.__meta__ = { obj : { indexes : ["test"]}};
dn_Process.UNIQ_ID = 0;
dn_Process.ROOTS = [];
dn_Version.VERSION_REG = new EReg("^[ \t]*([0-9]+)[.]*([0-9a-z]*)[.]*([0-9]*)\\-*([a-z0-9.-]*)","gim");
ElectronMain.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=electron.main.js.map